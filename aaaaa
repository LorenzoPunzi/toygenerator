module eventgen

    use numeric
    use inputs
    use histogram
    use utilities
    implicit none
    real(r14) :: inte, tmpintemin = 0., tmpintemax = 0., phimu,  &
    sinthgam, Muontensor(0:3,0:3), Electrontensor(0:3,0:3), invampl, naccpt = 0.
    real(r14) :: jacqq, jacgam, jacmuang, pgamvirt(0:3), z, ppos(0:3), pel(0:3)
    real(r14), allocatable :: pmu1(:,:), pmu2(:,:), pmod1(:), pmod2(:), pgam(:,:), costhmu1(:), &
    costhmu2(:), costhgam(:), qq(:), wght(:), sinthmu(:), cosphimu(:), sinphimu(:), &
    rndm(:,:) ! Reduce to fewer higher dimensional arrays 
    integer(i10) :: iev, arraylen
    integer(i10), allocatable :: accpt(:)
    integer :: run, err
    logical :: accepted



    contains
        subroutine allocarrays
            arraylen = max(ngen,nmax)

            allocate(pmu1(arraylen,0:3), stat=err) !!! Maybe only allocate the big event arrays if evsave is called
            if (err /= 0) then
                print *, "pmu1 array allocation request denied, aborting!"
                print*, ""
                stop
            endif
            allocate(pmod1(arraylen), stat=err)
            if (err /= 0) then
                print *, "pmod1 array allocation request denied, aborting!"
                print*, ""
                stop
            endif
            allocate(costhmu1(arraylen), stat=err)
            if (err /= 0) then
                print *, "costhmu1 array allocation request denied, aborting!"
                print*, ""
                stop
            endif

            allocate(sinthmu(arraylen), stat=err)
            if (err /= 0) then
                print *, "sinthmu array allocation request denied, aborting!"
                print*, ""
                stop
            endif

            allocate(cosphimu(arraylen), stat=err)
            if (err /= 0) then
                print *, "cosphimu array allocation request denied, aborting!"
                print*, ""
                stop
            endif

            allocate(sinphimu(arraylen), stat=err)
            if (err /= 0) then
                print *, "sinphimu array allocation request denied, aborting!"
                print*, ""
                stop
            endif

            if (isr .eqv. .false.) then ! BORN CASE

                allocate(accpt(arraylen), stat=err)
                if (err /= 0) then
                    print *, "accpt array allocation request denied, aborting!"
                    print*, ""
                    stop
                endif        

                allocate(rndm(arraylen,2), stat=err) !!! Maybe only allocate the big event arrays if evsave is called
                if (err /= 0) then
                    print *, "rndm array allocation request denied, aborting!"
                    print*, ""
                    stop
                endif

            else ! ISR CASE

                allocate(pmu2(arraylen,0:3), stat=err) !!! Maybe move these allocations to a subroutine
                if (err /= 0) then
                    print *, "pmu1 array allocation request denied, aborting!"
                    print*, ""
                    stop
                endif

                allocate(pmod2(arraylen), stat=err)
                if (err /= 0) then
                    print *, "pmod1 array allocation request denied, aborting!"
                    print*, ""
                    stop
                endif
                allocate(costhmu2(arraylen), stat=err)
                if (err /= 0) then
                    print *, "costhmu1 array allocation request denied, aborting!"
                    print*, ""
                    stop
                endif
                allocate(pgam(arraylen,0:3), stat=err)
                if (err /= 0) then
                    print *, "pgam array allocation request denied, aborting!"
                    print*, ""
                    stop
                endif
                allocate(costhgam(arraylen), stat=err)
                if (err /= 0) then
                    print *, "costhgam array allocation request denied, aborting!"
                    print*, ""
                    stop
                endif
                allocate(qq(arraylen), stat=err)
                if (err /= 0) then
                    print *, "qq array allocation request denied, aborting!"
                    print*, ""
                    stop
                endif

                if (wghtopt .eqv. .false.) then
                
                    allocate(accpt(arraylen), stat=err)
                    if (err /= 0) then
                        print *, "accpt array allocation request denied, aborting!"
                        print*, ""
                        stop
                    endif
                else
                    allocate(wght(arraylen), stat=err)
                    if (err /= 0) then
                        print *, "wght array allocation request denied, aborting!"
                        print*, ""
                        stop
                    endif
                endif
                
            endif


            
        end subroutine allocarrays

        subroutine genborn()

            print*, "iev ", iev
            call bornmuangles()
            
            pmu1(iev,0) = cme/2

            pmod1(iev) = sqrt( pmu1(iev,0)**2 - mmu**2 )

            pmu1(iev,1) = pmod1(iev) * sinthmu(iev) * cosphimu(iev)
            pmu1(iev,2) = pmod1(iev) * sinthmu(iev) * sinphimu(iev)
            pmu1(iev,3) = pmod1(iev) * costhmu1(iev)

            call testcuts()
            
            if (accepted) then

                accpt(iev) = 1
                naccpt = naccpt + 1. 

                if (histsave /= '') then
            
                    call updatehist(h_pmod1, 0.0_r14, pmodmu_max, pmod1(iev),1.0_r14)
                    call updatehist(h_emu1, 0.0_r14, enemu_max, pmu1(iev,0),1.0_r14)
                    call updatehist(h_thmu1, 0.0_r14, 180.0_r14, radtodeg*acos(costhmu1(iev)),1.0_r14)
            
                endif

            else
                accpt(iev) = 0
            endif

            
        end subroutine genborn

        subroutine bornmuangles()
            costhmu1(iev) = inverseCDF(rndm(iev,1))
            sinthmu(iev) = sqrt(1.0_r14-costhmu1(iev)**2)
            !phimu = 2*pi*rndm(2)
            cosphimu(iev) = cos(2*pi*rndm(iev,2))
            sinphimu(iev) = sin(2*pi*rndm(iev,2))
            
        end subroutine bornmuangles




program toygenerator
#ifdef _OPENMP
    use wrap_omp
#endif
    use numeric
    use inputs
    use histogram
    use eventgen
    use output
    implicit none
    real(r14) :: eff, sigma, dsigma, bornsigma
        
    print '("Number of available processors: ",i0)', get_nprocs()
    print '("Number of threads: ",i0)', get_nthreads()

    call loadinput()

    call random_seed(put=seed)

    call allocarrays()

    if (isr .eqv. .false.) then ! BORN CASE

        if (histsave /= '') call inithistsborn()    

        !do concurrent (iev = 1: ngen)

        !$omp parallel do shared(ngen)
        do iev = 1, ngen !!! THINK ABOUT PARALLELISATION
            call random_number(rndm)
            call genborn()

        end do
        !$omp end parallel do
        

        call writevents()
        call writehists()

        bornsigma = gev2nbarn*4.*pi/3.*alpha**2/sinv
        print*, "bornsigma ", bornsigma
        eff = dble(naccpt)/ngen
        sigma = bornsigma * eff
        dsigma = bornsigma/ngen * sqrt(ngen * eff * (1-eff))
        print *, ""
        print *, "--------------------------------------------"
        print '(A, f6.2, A, f6.2, A)', "Total Born cross section = ", sigma, " +-", dsigma, " nb"
        print *, ""
        print '(A, f5.3)', "Generation efficiency = ", eff
        print *, "--------------------------------------------"